{
  "afterAll": {
    "body": "afterAll(() => {\n\t$0\n});",
    "description": "afterAll function is called once after all specs",
    "prefix": "aa",
    "scope": "javascript,typescript"
  },
  "afterEach": {
    "body": "afterEach(() => {\n\t$0\n});",
    "description": "afterEach function is called once after each spec",
    "prefix": "ae",
    "scope": "javascript,typescript"
  },
  "beforeAll": {
    "body": "beforeAll(() => {\n\t$0\n});",
    "description": "beforeAll function is called once before all specs",
    "prefix": "ba",
    "scope": "javascript,typescript"
  },
  "beforeEach": {
    "body": "beforeEach(() => {\n\t$0\n});",
    "description": "beforeEach function is called once before each spec",
    "prefix": "be",
    "scope": "javascript,typescript"
  },
  "describe": {
    "body": "describe('${1:Name of the group}', () => {\n\t$0\n});",
    "description": "creates a describe block",
    "prefix": "desc",
    "scope": "javascript,typescript"
  },
  "describe.each": {
    "body": [
      "describe.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\ttest(`returns \\${expected}`, () => {",
      "\t\t\t${4:expect(double(input)).toBe(expected);}",
      "\t\t});",
      "\t}",
      ");"
    ],
    "description": "creates a describe block with different test data sets",
    "prefix": "desce",
    "scope": "javascript,typescript"
  },
  "describe.only": {
    "body": "describe.only('${1:Name of the group}', () => {\n\t$0\n});",
    "description": "creates a describe block that runs only",
    "prefix": "desco",
    "scope": "javascript,typescript"
  },
  "describe.skip": {
    "body": "describe.skip('${1:Name of the group}', () => {\n\t$0\n});",
    "description": "creates a describe block that will be skipped",
    "prefix": "descs",
    "scope": "javascript,typescript"
  },
  "expect": {
    "body": "expect($0)",
    "description": "expect actual value",
    "prefix": "exp",
    "scope": "javascript,typescript"
  },
  "expect.assertions": {
    "body": "expect.assertions($0);",
    "description": "expects the test to make the indicated number of assertions (useful for async)",
    "prefix": "expas",
    "scope": "javascript,typescript"
  },
  "expect.hasAssertions": {
    "body": "expect.hasAssertions();$0",
    "description": "expects the test to make at least one assertion (useful for async)",
    "prefix": "expha",
    "scope": "javascript,typescript"
  },
  "expect.rejects": {
    "body": "expect($1).rejects$0",
    "description": "expect promise rejects to",
    "prefix": "exprj",
    "scope": "javascript,typescript"
  },
  "expect.resolves": {
    "body": "expect($1).resolves$0",
    "description": "expect promise resolves to",
    "prefix": "expr",
    "scope": "javascript,typescript"
  },
  "it": {
    "body": "it('${1:should }', () => {\n\t$0\n});",
    "description": "creates an it block",
    "prefix": "it",
    "scope": "javascript,typescript"
  },
  "it.each": {
    "body": [
      "it.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\t${0:expect(double(input)).toBe(expected);}",
      "\t}",
      ");"
    ],
    "description": "creates an it block with different test data sets",
    "prefix": "ite",
    "scope": "javascript,typescript"
  },
  "it.only": {
    "body": "it.only('${1:should }', () => {\n\t$0\n});",
    "description": "creates an it block that runs only",
    "prefix": "ito",
    "scope": "javascript,typescript"
  },
  "it.skip": {
    "body": "it.skip('${1:should }', () => {\n\t$0\n});",
    "description": "creates an it block that will be skipped",
    "prefix": "its",
    "scope": "javascript,typescript"
  },
  "it.todo": {
    "body": "it.todo('${1:should }');",
    "description": "creates a test placeholder",
    "prefix": "itt",
    "scope": "javascript,typescript"
  },
  "it:async": {
    "body": "it('${1:should }', async () => {\n\t$0\n});",
    "description": "creates an it block with async callback function",
    "prefix": "ita",
    "scope": "javascript,typescript"
  },
  "jest.fn": {
    "body": "jest.fn($0)",
    "description": "creates jest.fn()",
    "prefix": "jfn",
    "scope": "javascript,typescript"
  },
  "template:cut": {
    "body": [
      "describe('${1:Name of the group}', () => {\n",
      "\tlet ${2:cut};\n",
      "\tbeforeEach(() => {\n\t\t$2 = $3;\n\t});\n",
      "\ttest('${1:should }', () => {",
      "\t\texpect($2).toBe($0);",
      "\t});\n",
      "});"
    ],
    "description": "creates a template to test a class under test",
    "prefix": "cut",
    "scope": "javascript,typescript"
  },
  "test": {
    "body": "test('${1:should }', () => {\n\t$0\n});",
    "description": "creates a test block",
    "prefix": "test",
    "scope": "javascript,typescript"
  },
  "test.each": {
    "body": [
      "test.each([${1:[1, 2], [2, 4]}])(",
      "\t'${2:double(%d)}',",
      "\t(${3:input, expected}) => {",
      "\t\t${0:expect(double(input)).toBe(expected);}",
      "\t}",
      ");"
    ],
    "description": "creates an test block with different test data sets",
    "prefix": "teste",
    "scope": "javascript,typescript"
  },
  "test.each (table)": {
    "body": [
      "test.each`",
      "\t${1:input}\t| ${2:expected}",
      "\t\\${1}\t| \\${2}",
      "\t\\${2}\t| \\${4}",
      "`('${3:double($${1:input})}', ({ ${1:input}, ${2:expected} }) => {",
      "\t${0:expect(double(${1:input})).toBe(${2:expected});}",
      "});"
    ],
    "description": "creates a test block using a permutation table",
    "prefix": "testet",
    "scope": "javascript,typescript"
  },
  "test.only": {
    "body": "test.only('${1:should }', () => {\n\t$0\n});",
    "description": "creates a test block  that runs only",
    "prefix": "testo",
    "scope": "javascript,typescript"
  },
  "test.skip": {
    "body": "test.skip('${1:should }', () => {\n\t$0\n});",
    "description": "creates a test block that will be skipped",
    "prefix": "tests",
    "scope": "javascript,typescript"
  },
  "test.todo": {
    "body": "test.todo('${1:should }');",
    "description": "creates a test placeholder",
    "prefix": "testt",
    "scope": "javascript,typescript"
  },
  "test:async": {
    "body": "test('${1:should }', async () => {\n\t$0\n});",
    "description": "creates an test block with async callback function",
    "prefix": "testa",
    "scope": "javascript,typescript"
  },
  "toBe": {
    "body": "expect($1).toBe($0);",
    "description": "expects the first argument to be equal with the second one",
    "prefix": "tb",
    "scope": "javascript,typescript"
  },
  "toBeCloseTo": {
    "body": "expect($1).toBeCloseTo(${2:number}, ${3:delta});$0",
    "description": "expects the first argument to be close to the second one base on the delta",
    "prefix": "tbct",
    "scope": "javascript,typescript"
  },
  "toBeDefined": {
    "body": "expect($1).toBeDefined();$0",
    "description": "expects the argument is defined",
    "prefix": "tbd",
    "scope": "javascript,typescript"
  },
  "toBeFalsy": {
    "body": "expect($1).toBeFalsy();$0",
    "description": "expects the argument is falsy",
    "prefix": "tbf",
    "scope": "javascript,typescript"
  },
  "toBeGreaterThan": {
    "body": "expect($1).toBeGreaterThan($0);",
    "description": "expects the argument is greater than or equal",
    "prefix": "tbgt",
    "scope": "javascript,typescript"
  },
  "toBeGreaterThanOrEqual": {
    "body": "expect($1).toBeGreaterThanOrEqual($0);",
    "description": "expects the argument is greater than",
    "prefix": "tbgte",
    "scope": "javascript,typescript"
  },
  "toBeInstanceOf": {
    "body": "expect($1).toBeInstanceOf($0);",
    "description": "expects the argument is less than",
    "prefix": "tbi",
    "scope": "javascript,typescript"
  },
  "toBeLessThan": {
    "body": "expect($1).toBeLessThan($0);",
    "description": "expects the argument is less than",
    "prefix": "tblt",
    "scope": "javascript,typescript"
  },
  "toBeLessThanOrEqual": {
    "body": "expect($1).toBeLessThanOrEqual($0);",
    "description": "expects the argument is less than or equal",
    "prefix": "tblte",
    "scope": "javascript,typescript"
  },
  "toBeNull": {
    "body": "expect($1).toBeNull();$0",
    "description": "expects the argument is null",
    "prefix": "tbn",
    "scope": "javascript,typescript"
  },
  "toBeTruthy": {
    "body": "expect($1).toBeTruthy();$0",
    "description": "expects the argument is truthy",
    "prefix": "tbt",
    "scope": "javascript,typescript"
  },
  "toBeUndefined": {
    "body": "expect($1).toBeUndefined();$0",
    "description": "expects the argument is undefined",
    "prefix": "tbu",
    "scope": "javascript,typescript"
  },
  "toContain": {
    "body": "expect(${1:list}).toContain($0);",
    "description": "expects the list contains the item (===)",
    "prefix": "tc",
    "scope": "javascript,typescript"
  },
  "toContainEqual": {
    "body": "expect(${1:list}).toContainEqual($0);",
    "description": "expects the list contains the item (equals)",
    "prefix": "tce",
    "scope": "javascript,typescript"
  },
  "toEqual": {
    "body": "expect($1).toEqual($0);",
    "description": "expects the first argument to be equal with the second one",
    "prefix": "te",
    "scope": "javascript,typescript"
  },
  "toHaveBeenCalled": {
    "body": "expect($1).toHaveBeenCalled();$0",
    "description": "returns true if the spy was called",
    "prefix": "thbc",
    "scope": "javascript,typescript"
  },
  "toHaveBeenCalledTimes": {
    "body": "expect($1).toHaveBeenCalledTimes($0);",
    "description": "returns true if the spy has been called given times",
    "prefix": "thbct",
    "scope": "javascript,typescript"
  },
  "toHaveBeenCalledWith": {
    "body": "expect($1).toHaveBeenCalledWith($0);",
    "description": "returns true if the spy has been called with",
    "prefix": "thbcw",
    "scope": "javascript,typescript"
  },
  "toHaveBeenLastCalledWith": {
    "body": "expect($1).toHaveBeenLastCalledWith($0);",
    "description": "returns true if the spy has been last called with",
    "prefix": "thblcw",
    "scope": "javascript,typescript"
  },
  "toHaveLength": {
    "body": "expect($1).toHaveLength($0);",
    "description": "expects the object to have length",
    "prefix": "thl",
    "scope": "javascript,typescript"
  },
  "toHaveProperty": {
    "body": "expect($1).toHaveProperty(${2:keyPath}, ${3:value});$0",
    "description": "returns true if the argument matches the second object",
    "prefix": "thp",
    "scope": "javascript,typescript"
  },
  "toMatch": {
    "body": "expect($1).toMatch($0);",
    "description": "returns true if the argument matches the second value",
    "prefix": "tm",
    "scope": "javascript,typescript"
  },
  "toMatchInlineSnapshot": {
    "body": "expect($1).toMatchInlineSnapshot($0);",
    "description": "returns true if the argument matches the most recent inline snapshot",
    "prefix": "tmis",
    "scope": "javascript,typescript"
  },
  "toMatchObject": {
    "body": "expect($1).toMatchObject($0);",
    "description": "returns true if the argument matches the second object",
    "prefix": "tmo",
    "scope": "javascript,typescript"
  },
  "toMatchSnapshot": {
    "body": "expect($1).toMatchSnapshot($0);",
    "description": "returns true if the argument matches the most recent snapshot",
    "prefix": "tms",
    "scope": "javascript,typescript"
  },
  "toStrictEqual": {
    "body": "expect($1).toStrictEqual($0);",
    "description": "expects the first argument to be strictly equal with the second one",
    "prefix": "tse",
    "scope": "javascript,typescript"
  },
  "toThrow": {
    "body": "expect(() => {\n\t$0\n}).toThrow($1);",
    "description": "expects that the method will throw an error",
    "prefix": "tt",
    "scope": "javascript,typescript"
  },
  "toThrowError": {
    "body": "expect(() => {\n\t$0\n}).toThrowError($1);",
    "description": "expects that the method will throw an error",
    "prefix": "tte",
    "scope": "javascript,typescript"
  },
  "toThrowErrorMatchingInlineSnapshot": {
    "body": "expect(() => {\n\t$0\n}).toThrowErrorMatchingInlineSnapshot();",
    "description": "expects that the method will throw an error matching the inline snapshot",
    "prefix": "ttemis",
    "scope": "javascript,typescript"
  },
  "toThrowErrorMatchingSnapshot": {
    "body": "expect(() => {\n\t$0\n}).toThrowErrorMatchingSnapshot();",
    "description": "expects that the method will throw an error mathing the snapshpot",
    "prefix": "ttems",
    "scope": "javascript,typescript"
  }
}
